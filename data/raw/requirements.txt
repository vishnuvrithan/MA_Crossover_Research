Core requirements
numpy>=1.20.0
pandas>=1.3.0
matplotlib>=3.4.0
seaborn>=0.11.0
scipy>=1.7.0
tqdm>=4.60.0

Optional ML requirements
scikit-learn>=0.24.0
statsmodels>=0.12.0

Testing
pytest>=6.2.0
pytest-cov>=2.8.0



Data files
data/raw/
data/processed/
*.csv
*.feather
*.parquet

Python
pycache/
*.py[cod]
*.so
.Python
build/
dist/
*.egg-info/

Jupyter
.ipynb_checkpoints/
*.ipynb

Environments
.env
.venv
env/
venv/
ENV/


4. **src/strategy.py** (Example core file)
```python
"""
Core moving average crossover strategy implementation
"""

import pandas as pd
import numpy as np
from typing import Tuple

class MACrossover:
    """Implements MA crossover trading logic"""
    
    def __init__(self, short_window: int = 50, long_window: int = 200):
        self.short_window = short_window
        self.long_window = long_window
        
    def calculate_signals(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        Generate trading signals based on MA crossover
        
        Args:
            data: DataFrame with price data
            
        Returns:
            DataFrame with signals
        """
        data = data.copy()
        data['SMA_Short'] = data['Close'].rolling(self.short_window).mean()
        data['SMA_Long'] = data['Close'].rolling(self.long_window).mean()
        
        data['Signal'] = np.where(
            data['SMA_Short'] > data['SMA_Long'], 1, 0)
        data['Position'] = data['Signal'].diff()
        
        return data


# Strategy Introduction Notebook

import pandas as pd
import matplotlib.pyplot as plt
from src.strategy import MACrossover
from src.backtest import Backtester

# Load data
data = pd.read_csv('../data/processed/prepared_data.feather')

# Initialize strategy
strategy = MACrossover(short_window=50, long_window=200)

# Generate signals
signals = strategy.calculate_signals(data)

# Backtest
backtester = Backtester()
results = backtester.run(signals)

# Plot results
plt.figure(figsize=(12,6))
plt.plot(results['Cumulative_Strategy'])
plt.title('Strategy Performance')
plt.show()
